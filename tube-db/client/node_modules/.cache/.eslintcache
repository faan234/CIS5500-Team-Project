[{"/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/index.js":"1","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/pages/TrendingVideosPage.js":"2","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/pages/HomePage.js":"3","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/pages/TopChannelsPage.js":"4","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/fetcher.js":"5","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/components/NavbarItem.js":"6","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/components/SideMenu.js":"7"},{"size":988,"mtime":1658947787967,"results":"8","hashOfConfig":"9"},{"size":0,"mtime":1658947787967,"results":"10","hashOfConfig":"9"},{"size":3131,"mtime":1659041105083,"results":"11","hashOfConfig":"9"},{"size":11369,"mtime":1659041278354,"results":"12","hashOfConfig":"9"},{"size":1057,"mtime":1658970521765,"results":"13","hashOfConfig":"9"},{"size":428,"mtime":1659040658606,"results":"14","hashOfConfig":"9"},{"size":1009,"mtime":1659041178017,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1445w12",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/index.js",[],["35","36"],"/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/pages/TrendingVideosPage.js",[],"/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/pages/HomePage.js",["37","38"],"import React from 'react';\nimport SideMenu from '../components/SideMenu';\nimport './HomePage.css'\nimport TubeDBLogo from '../images/Group_1.svg';\nimport { getHomeVideos } from '../fetcher'\n\nimport {\n  Table,\n  Select\n} from 'antd'\n\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n/*\nconst videoDetails = [\n  //title, trending_date, likes, thumbnail_link\n  {\n    title: 'Video Title',\n    dataIndex: 'title',\n    key: '1',\n    sorter: (a, b) => a.title.localeCompare(b.title),\n  },\n  {\n    title: 'Trending Date',\n    dataIndex: 'trending_date',\n    key: '2',\n    sorter: (a, b) => a.trending_date.localeCompare(b.trending_date)\n  },\n  {\n    title: 'Likes',\n    dataIndex: 'likes',\n    key: '3',\n    sorter: (a, b) => a.likes.localeCompare(b.likes)\n  },\n  {\n    title: 'Picture Thumbnail',\n    dataIndex: 'thumbnail_link',\n    key: '4'\n  }\n];\n*/\n\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      videoResults: [],\n      pageCount: 1,\n      country: \"United States\"\n    }\n\n    this.handleMoreVideos = this.handleMoreVideos.bind(this)\n    this.updateMoreVideos = this.updateMoreVideos.bind(this)\n  }\n\n  updateMoreVideos() {\n    getHomeVideos(this.state.country, this.state.pageCount).then(res => {\n      this.setState({ videoResults: res.results })\n    })\n  }\n\n  handleMoreVideos(){\n    this.setState({pageCount: (this.state.pageCount + 1)})\n  }\n\n  componentDidMount() {\n    getHomeVideos(this.state.country, this.state.pageCount).then(res => {\n      this.setState({ videoResults: res.results })\n      console.log(this.state.videoResults);\n    })\n  };\n\n  render() {\n\n    return (\n      \n      <div>\n\n      <div id=\"headerBar\">\n        \n        <div id=\"headerContent\">\n        Content here\n        </div>\n      </div>\n\n      <div id=\"page\">\n        <div id=\"sideBar\">\n            <div>\n            <SideMenu />\n            </div>\n        </div>\n      \n        <div id=\"pageContent\">\n        content\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n        <h3>Thumbnail Testing</h3>\n        <Table onRow={(record, rowIndex) => {\n            //return {\n             // onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n            //};\n          }} dataSource={this.state.videoResults} rowKey={'key'} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n            <ColumnGroup title=\"Random Videos\">\n              <Column title=\"Video Title\" dataIndex=\"title\" sorter= {(a, b) => a.title.localeCompare(b.title)}/>\n              <Column title=\"Trending Date\" dataIndex=\"trending_date\" sorter= {(a, b) => a.trending_date.localeCompare(b.trending_date)}/>\n              <Column title=\"Likes\" dataIndex=\"likes\" sorter= {(a, b) => a.likes.localeCompare(b.likes)}/>\n              <Column title=\"Picture Thumbnail\" dataIndex=\"thumbnail_link\"/>\n            </ColumnGroup>\n          </Table>  \n        </div>\n        </div>\n      </div>\n    </div>\n    )\n  };\n\n}\n\nexport default HomePage\n\n","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/pages/TopChannelsPage.js",["39","40","41","42","43","44"],"import React from 'react';\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress, Container, CardSubtitle } from \"shards-react\";\nimport SideMenu from '../components/SideMenu';\nimport './TopChannels.css';\n\n//import { FixedSizeList as List } from \"react-window\";\n\nimport {\n    Table,\n    Row,\n    Col,\n    Divider,\n} from 'antd'\n\nimport { getChannel, getFindChannels } from '../fetcher'\n\nconst { Column, ColumnGroup } = Table;\n\nfunction numFormatter(num) {\n    if(num >= 1000 && num < 1000000){\n        return (num/1000).toFixed(1) + 'K'; // convert to K where num >= 1,000 but num < 1 mil\n    }else if(num >= 1000000 && num < 1000000000){\n        return (num/1000000).toFixed(1) + 'M'; // convert to M where num >= 1 mil but num < 1 bil\n    }else if(num >= 1000000000){\n        return (num/1000000000).toFixed(1) + 'B'; // convert to B where num >= 1 bil\n    }else if(num < 900){\n        return num; // if num < 1000, do nothing\n    }\n}\n\nfunction growthFormatter(deci){\n    let newNum = deci;\n    newNum*=100;\n    if (newNum>=0){\n        return \"+\" + newNum.toFixed(1) + \"%\";\n    }else{\n        return newNum.toFixed(1) + \"%\";\n    }\n}\n\nclass TopChannelsPage extends React.Component {\n\n    \n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedQuery: \"\",\n            channelsQuery: \"\",\n            selectedQueryResults: [],\n            channelsQueryResults: [],\n            selectedChannelDetails: null\n        }\n        this.updateChannelSearchBar = this.updateChannelSearchBar.bind(this)\n        this.executeChannelSearch = this.executeChannelSearch.bind(this)\n        this.executeSelectedSearch = this.executeSelectedSearch.bind(this)\n    }\n\n    updateChannelSearchBar(event) {\n        this.setState({ selectedQuery: event.target.value })\n    }\n\n    executeChannelSearch() {\n        getFindChannels().then(res => {    // \n            this.setState({ channelsQueryResults: res.results })\n        })\n    }\n\n    executeSelectedSearch(Ranking) {\n        getChannel(Ranking).then(res => {    // \n            this.setState({ selectedQueryResults: res.results })\n            this.setState({ selectedChannelDetails: res.results[0] })\n        })\n    }\n\n    componentDidMount() {\n\n        getFindChannels().then(res => {    // \n            this.setState({ channelsQueryResults: res.results })\n        })\n\n        getChannel(1).then(res => {\n            this.setState({ selectedChannelDetails: res.results[0] })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n\n                /* <SideMenu /> */\n\n                <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n                    <h3>Channels</h3>\n                    <Table onRow={(record, rowIndex) => {\n                        return {\n                        onClick: event => {this.executeSelectedSearch(record.Ranking)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n                        };\n                        }} dataSource={this.state.channelsQueryResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 10, showQuickJumper:true }}>\n                                \n                                <Column title=\"Ranking\" dataIndex=\"Ranking\" key=\"Ranking\" sorter= {(a, b) => a.Ranking-b.Ranking}/>\n                                <Column title=\"Title\" dataIndex=\"Title\" key=\"Title\" sorter= {(a, b) => a.Title.localeCompare(b.Title)}/>\n                                <Column title=\"Country\" dataIndex=\"country\" key=\"country\" sorter= {(a, b) => a.country.localeCompare(b.country)}/> {/* Need a way to deal with null here...*/}\n                                <Column title=\"Language\" dataIndex=\"language\" key=\"language\" sorter= {(a, b) => a.language.localeCompare(b.language)}/>\n                                \n                                <ColumnGroup title=\"Viewership\">\n                                    <Column title=\"Subscribers\" dataIndex=\"subscribers\" key=\"subscribers\" render={(a)=>numFormatter(a)} sorter= {(a, b) => a.subscribers-b.subscribers}/>\n                                    <Column title=\"Total Views\" dataIndex=\"views\" key=\"views\" render={(a)=>numFormatter(a)} sorter= {(a, b) => a.views-b.views}/>\n                                </ColumnGroup>\n                    </Table>\n                </div>\n\n\n\n                {/* Selected Channel will display via below structure */}\n                <Divider />\n                {this.state.selectedChannelDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n                    <Container>\n                     <h2 lex={2} style={{ textAlign: 'center' }}>{this.state.selectedChannelDetails.channel_title}</h2>\n                        <Row>\n                            <Col>\n                                <Card style={{ 'border-radius': '1rem 0rem 0rem 1rem', 'background-color':'black'}}>\n                                    <CardBody >\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'center', margin: '0rem', padding: '0rem'}}>\n                                                <h3 className={'cardText cardTitle'}>Statistics</h3>\n                                            </Col>\n\n                                            <Divider className='cardDivider'/>\n                                        \n                                        </Row>\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'center'}}>\n                                                <CardTitle className='cardText'>{\"All Time\"}</CardTitle>\n                                            </Col>\n                                        </Row>\n\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign:'left'}}>\n                                                <CardSubtitle className='cardText'>Views</CardSubtitle>\n                                            </Col>\n\n\n                                            <Col flex={2} style={{ textAlign: 'right' }}>\n                                                <CardSubtitle className='cardText'>Subs</CardSubtitle>\n                                            </Col>\n                                        </Row>\n\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'left' }}>\n                                                <p className='cardText'>{numFormatter(this.state.selectedChannelDetails.views)}</p>\n                                            </Col>\n\n                                            <Col flex={2} style={{ textAlign: 'right' }}>\n                                                <p className='cardText'>{numFormatter(this.state.selectedChannelDetails.subscribers)}</p>\n                                            </Col>\n                                        </Row>\n\n                                        <Divider className='cardDivider'/>\n\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'center' }}>\n                                                <CardTitle className='cardText'>{\"Last 3 Months\"}</CardTitle>\n                                            </Col>\n                                        </Row>\n\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign:'left'}}>\n                                                <CardSubtitle className='cardText'>Views</CardSubtitle>\n                                            </Col>\n\n\n                                            <Col flex={2} style={{ textAlign: 'right' }}>\n                                                <CardSubtitle className='cardText'>Subs</CardSubtitle>\n                                            </Col>\n                                        </Row>\n\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'left' }}>\n                                                <p className='cardText'>{numFormatter(this.state.selectedChannelDetails.views_l3m)}</p>\n                                            </Col>\n\n                                            <Col flex={2} style={{ textAlign: 'right' }}>\n                                                <p className='cardText'>{numFormatter(this.state.selectedChannelDetails.subscribers_l3m)}</p>\n                                            </Col>\n                                        </Row>\n\n                                        {/* <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'left' }}>\n                                            <h5 className='cardText'>Growth</h5>\n                                            </Col>\n\n                                            <Col flex={2} style={{ textAlign: 'right' }}>\n                                            <h5 className='cardText'>Growth</h5>\n                                            </Col>\n                                        </Row> */}\n\n                                        <Row gutter='30' align='middle' justify='center'>\n                                            <Col flex={2} style={{ textAlign: 'left' }}>\n                                                <p className={this.state.selectedChannelDetails.view_growth_rate_l3m > 0 ? 'posGrowth':'negGrowth'}>\n                                                    {growthFormatter(this.state.selectedChannelDetails.view_growth_rate_l3m)}\n                                                </p>\n                                            </Col>\n\n                                            <Col flex={2} style={{ textAlign: 'right' }}>\n                                                <p className={this.state.selectedChannelDetails.subscriber_growth_rate_l3m > 0 ? 'posGrowth':'negGrowth'}>\n                                                    {growthFormatter(this.state.selectedChannelDetails.subscriber_growth_rate_l3m)}\n                                                </p>\n                                            </Col>\n                                        </Row>\n\n                                    </CardBody>\n                                </Card>\n                            </Col>\n\n                            <Col flex={2} style={{ textAlign: 'right' , 'border-radius': '0 1rem 1rem 0', 'background-color':'#2f4550'}}>\n                                <h3 flex={2} style={{ textAlign: 'center', color: 'whitesmoke', margin: '1rem 0 1rem 0'}}>Trending Videos</h3>\n                            </Col>\n                        </Row>\n                        \n                    </Container>\n                    \n                    \n                </div> : null}\n                <Divider />\n\n            </div>\n        )\n    }\n}\n\nexport default TopChannelsPage","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/fetcher.js",[],"/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/components/NavbarItem.js",["45"],"import React from \"react\";\nimport \"./NavbarItem.css\";\nimport navitemLogo from '../images/view-grid@2x.svg';\n\nfunction NavbarItem(props) {\n  const { text, className } = props;\n\n  return (\n    <div className={`nav-item border-1px-black ${className || \"\"}`}>\n      <img className=\"view-grid\" src={navitemLogo} />\n      <div className=\"text inter-medium-pearl-lusta-18-7px\">{text}</div>\n    </div>\n  );\n}\n\nexport default NavbarItem;","/Users/zanzhang/Documents/GitHub/CIS5500-Team-Project/tube-db/client/src/components/SideMenu.js",["46","47","48","49","50","51","52","53"],"\nimport React, {useState} from 'react';\n\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\nimport NavbarItem from './NavbarItem';\nimport { Nav, NavItem, NavLink } from \"shards-react\";\nimport {Menu} from 'antd';\nimport TubeDBLogo from '../images/Group_1.svg';\n\nimport './SideMenu.css';\n\n\nclass SideMenu extends React.Component {\n  state = {\n    current: 'home',\n  };\n\n  handleClick = e => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render () {\n    return (\n      <Nav justified>\n        <div id=\"sideMenu\">\n        <div id=\"headerLogo\">\n        <img src={TubeDBLogo} width={150} />\n        </div>\n          <div className='header-labels'>\n          <NavbarItem text=\"Saved Videos\" href=\"#\"/>\n          <NavbarItem text=\"Trending Videos\" href=\"#\"/>\n          <NavbarItem text=\"Channels\" href=\"#\"/>\n          <NavbarItem text=\"Profile\" href=\"#\"/>\n        </div>\n        </div>\n      </Nav>\n    );\n  }\n}\n\n\nexport default SideMenu;\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":18},{"ruleId":"58","severity":1,"message":"62","line":13,"column":9,"nodeType":"60","messageId":"61","endLine":13,"endColumn":15},{"ruleId":"58","severity":1,"message":"63","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":14},{"ruleId":"58","severity":1,"message":"64","line":2,"column":16,"nodeType":"60","messageId":"61","endLine":2,"endColumn":25},{"ruleId":"58","severity":1,"message":"65","line":2,"column":27,"nodeType":"60","messageId":"61","endLine":2,"endColumn":36},{"ruleId":"58","severity":1,"message":"66","line":2,"column":38,"nodeType":"60","messageId":"61","endLine":2,"endColumn":44},{"ruleId":"58","severity":1,"message":"67","line":2,"column":73,"nodeType":"60","messageId":"61","endLine":2,"endColumn":81},{"ruleId":"68","severity":1,"message":"69","line":89,"column":18,"nodeType":"70","messageId":"71","endLine":91,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":10,"column":7,"nodeType":"74","endLine":10,"endColumn":54},{"ruleId":"58","severity":1,"message":"75","line":2,"column":16,"nodeType":"60","messageId":"61","endLine":2,"endColumn":24},{"ruleId":"58","severity":1,"message":"76","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":26},{"ruleId":"58","severity":1,"message":"77","line":4,"column":28,"nodeType":"60","messageId":"61","endLine":4,"endColumn":40},{"ruleId":"58","severity":1,"message":"78","line":4,"column":42,"nodeType":"60","messageId":"61","endLine":4,"endColumn":57},{"ruleId":"58","severity":1,"message":"79","line":6,"column":15,"nodeType":"60","messageId":"61","endLine":6,"endColumn":22},{"ruleId":"58","severity":1,"message":"80","line":6,"column":24,"nodeType":"60","messageId":"61","endLine":6,"endColumn":31},{"ruleId":"58","severity":1,"message":"81","line":7,"column":9,"nodeType":"60","messageId":"61","endLine":7,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":30,"column":9,"nodeType":"74","endLine":30,"endColumn":45},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'TubeDBLogo' is defined but never used.","Identifier","unusedVar","'Option' is assigned a value but never used.","'Form' is defined but never used.","'FormInput' is defined but never used.","'FormGroup' is defined but never used.","'Button' is defined but never used.","'Progress' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'AppstoreOutlined' is defined but never used.","'MailOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Menu' is defined but never used.","no-global-assign","no-unsafe-negation"]